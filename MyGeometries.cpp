//
//  MyGeometries.cpp - Fall 2022
//
//   Sets up and renders 
//     - the ground plane, and
//     - the surface of rotation
//   for the Math 155A project #6.
//


// Use the static library (so glew32.dll is not needed):
#define GLEW_STATIC
#include <GL/glew.h> 
#include <GLFW/glfw3.h>

#include "LinearR3.h"		// Adjust path as needed.
#include "LinearR4.h"		// Adjust path as needed.
#include "MathMisc.h"       // Adjust path as needed

#include "MyGeometries.h"
#include "TextureProj.h"
#include "PhongData.h"
#include "RgbImage.h"
#include "GlGeomCylinder.h"
#include "GlGeomSphere.h"
#include "GlGeomTorus.h"

// **********************************
// Material to underlie a texture map.
// YOU MAY DEFINE A SECOND ONE OF THESE IF YOU WISH
// **********************************
phMaterial materialUnderTexture;
phMaterial materialUnderTextureDark; 
phMaterial materialUnderTexturebright;

// **************************
// Information for loading textures
// **************************
const int NumTextures = 12;
unsigned int TextureNames[NumTextures];     // Texture names generated by OpenGL
const char* TextureFiles[NumTextures] = {
    "oak.bmp",
    "wod.bmp",
    "titan2.bmp",
    "galaxy_2.bmp",
    "galaxy.bmp",
    "blackhole.bmp",
    "column.bmp",
    "titan1.bmp",
    "sapphire.bmp",
    "titan2.bmp", 
    "woodtext.bmp",
    "white (1).bmp"
};

const int numSceneTextures = 10; 
unsigned int SceneNames[numSceneTextures];
const char* sceneFiles[] = {
    "nasa1.bmp",
    "webbies.bmp",
    "webbies1.bmp",
    "webbies2.bmp",
    "galaxy.bmp",
    "blackhole.bmp",
    "webbies.bmp",
    "earth_clouds.bmp",
    "galaxy_2 (1).bmp",
    "nasa1.bmp",
};

const int numSolarTextures = 10;
unsigned int SolarNames[numSolarTextures];
const char* solarFiles[] = {
    "milks.bmp",
    "merc.bmp",
    "venus.bmp",
    "earth.bmp",
    "mars.bmp",
    "jupiter.bmp",
    "saturn.bmp",
    "uranus.bmp",
    "neptune.bmp",
    "pluto.bmp",

};


// *******************************
// For spheres and a cylinder and a torus (Torus is currently not used.)
// *******************************
GlGeomSphere texSphere(4, 4);
GlGeomCylinder texCylinder(4, 4, 4);
GlGeomTorus texTorus(4, 4, .1);   


// ************************
// General data helping with setting up VAO (Vertex Array Objects)
//    and Vertex Buffer Objects.
// ***********************
const int NumObjects = 10;
const int iFloor = 0;
const int iCircularSurf = 1;
const int iWall = 2;            // RESERVED FOR USE BY 155A PROJECT
const int iWall2 = 3;            // RESERVED FOR USE BY 155A PROJECT
const int iWall3 = 4;            // RESERVED FOR USE BY 155A PROJECT
const int iWall4 = 5; 
const int iWall5 = 6; 
const int iWall6 = 7; 
const int iWall7 = 8;
const int iWall8 = 9;

unsigned int myVBO[NumObjects];  // a Vertex Buffer Object holds an array of data
unsigned int myVAO[NumObjects];  // a Vertex Array Object - holds info about an array of vertex data;
unsigned int myEBO[NumObjects];  // a Element Array Buffer Object - holds an array of elements (vertex indices)

// Animation controls 
//double animateIncrement = 0.01;   // Make bigger to speed up animation, smaller to slow it down.
//double currentTime = 0.0;         // Current "time" for the animation.
double currentTime_rev = 0.0;
double maxTime = 1.0;             // Time cycles back to 0 after reaching maxTime.

double HourOfDay = 0.0;
double DayOfYear = 0.0;
double DayOfYearX = 0.0;
double AnimateIncrement = 24.0;  // Time step for animation (in units of hours)
// double currenTime 
// ********************************************
// This sets up for texture maps. It is called only once
// ********************************************
void SetupForTextures()
{
    // This material goes under the textures.
    // IF YOU WISH, YOU MAY DEFINE MORE THAN ONE OF THESE FOR DIFFERENT GEOMETRIES
    materialUnderTexture.SpecularColor.Set(0.9, 0.9, 0.9);
    materialUnderTexture.AmbientColor.Set(0.3, 0.3, 0.3);
    materialUnderTexture.DiffuseColor.Set(0.7, 0.7, 0.7);       // Increase or decrease to adjust brightness
    materialUnderTexture.SpecularExponent = 40.0;

    materialUnderTexturebright.SpecularColor.Set(0.9, 0.9, 0.9);
    materialUnderTexturebright.AmbientColor.Set(0.3, 0.3, 0.3);
    materialUnderTexturebright.DiffuseColor.Set(0.9, 0.9, 0.9);       // Increase or decrease to adjust brightness
    materialUnderTexturebright.SpecularExponent = 40.0;

    materialUnderTextureDark.SpecularColor.Set(0.9, 0.9, 0.9);
    materialUnderTextureDark.AmbientColor.Set(0.3, 0.3, 0.3);
    materialUnderTextureDark.DiffuseColor.Set(0.4, 0.4, 0.4);       // Increase or decrease to adjust brightness
    materialUnderTextureDark.SpecularExponent = 40.0;
                        
    // ***********************************************
    // Load texture maps
	// ***********************************************
    RgbImage texMap;

    glUseProgram(shaderProgramBitmap);
    glActiveTexture(GL_TEXTURE0);
    glGenTextures(NumTextures, TextureNames);
    for (int i = 0; i < NumTextures; i++) {
        texMap.LoadBmpFile(TextureFiles[i]);            // Read i-th texture from the i-th file.
        glBindTexture(GL_TEXTURE_2D, TextureNames[i]);  // Bind (select) the i-th OpenGL texture

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

        // Set best quality filtering.   Also see below for disabling mipmaps.
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);  // Requires that mipmaps be generated (see below)
        // You may also try GL_LINEAR_MIPMAP_NEAREST -- try looking at the wall from a 30 degree angle, and look for sweeping transitions.

        // Store the texture into the OpenGL texture named TextureNames[i]
        int textureWidth = texMap.GetNumCols();
        int textureHeight = texMap.GetNumRows();
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, texMap.ImageData());
 #if 1
        // Use mipmaps  (Best!)
        glGenerateMipmap(GL_TEXTURE_2D);
#else
        // Don't use mipmaps.  Try moving away from the brick wall a great distance
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
#endif

    }
    glGenTextures(numSceneTextures, SceneNames);
    for (int i = 0; i < numSceneTextures; i++) {
        texMap.LoadBmpFile(sceneFiles[i]);            // Read i-th texture from the i-th file.
        glBindTexture(GL_TEXTURE_2D, SceneNames[i]);  // Bind (select) the i-th OpenGL texture

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

        // Set best quality filtering.   Also see below for disabling mipmaps.
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);  // Requires that mipmaps be generated (see below)
        // You may also try GL_LINEAR_MIPMAP_NEAREST -- try looking at the wall from a 30 degree angle, and look for sweeping transitions.

        // Store the texture into the OpenGL texture named TextureNames[i]
        int textureWidth = texMap.GetNumCols();
        int textureHeight = texMap.GetNumRows();
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, texMap.ImageData());
#if 1
        // Use mipmaps  (Best!)
        glGenerateMipmap(GL_TEXTURE_2D);
#else
        // Don't use mipmaps.  Try moving away from the brick wall a great distance
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
#endif

    }

    glGenTextures(numSolarTextures, SolarNames);
    for (int i = 0; i < numSceneTextures; i++) {
        texMap.LoadBmpFile(solarFiles[i]);            // Read i-th texture from the i-th file.
        glBindTexture(GL_TEXTURE_2D, SolarNames[i]);  // Bind (select) the i-th OpenGL texture

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

        // Set best quality filtering.   Also see below for disabling mipmaps.
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);  // Requires that mipmaps be generated (see below)
        // You may also try GL_LINEAR_MIPMAP_NEAREST -- try looking at the wall from a 30 degree angle, and look for sweeping transitions.

        // Store the texture into the OpenGL texture named TextureNames[i]
        int textureWidth = texMap.GetNumCols();
        int textureHeight = texMap.GetNumRows();
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, texMap.ImageData());
#if 1
        // Use mipmaps  (Best!)
        glGenerateMipmap(GL_TEXTURE_2D);
#else
        // Don't use mipmaps.  Try moving away from the brick wall a great distance
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
#endif

    }

    // Make sure that the shaderProgramBitmap uses the GL_TEXTURE_0 texture.
    glUseProgram(shaderProgramBitmap);
    glUniform1i(glGetUniformLocation(shaderProgramBitmap, "theTextureMap"), 0);
    glActiveTexture(GL_TEXTURE0);


}

// **********************
// This sets up geometries needed for 
//   (a) the floor (ground plane)
//   (b) the back wall
//   (c) the circular mesh
//   (d) two spheres
//   (e) one cylinder
//  It is called only once.
//  YOU NEED TO CHANGE THIS ONCE YOU ADD THE TEXTURE COORDINATES TO THE CIRCULAR SURFACE.
// **********************
void MySetupSurfaces() {

    texSphere.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texCylinder.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texTorus.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);

    // Initialize the VAO's, VBO's and EBO's for the ground plane, the back wall
    // and the surface of rotation. Gives them the "vertPos" location,
    // and the "vertNormal"  and the "vertTexCoords" locations in the shader program.
    // No data is loaded into the VBO's or EBO's for the circular surface until the "Remesh"
    //   routines is called

    glGenVertexArrays(NumObjects, &myVAO[0]);
    glGenBuffers(NumObjects, &myVBO[0]);
    glGenBuffers(NumObjects, &myEBO[0]);

    // For the Floor:
    // Allocate the needed Vertex Array Objects (VAO's),
    //      Vertex Buffer Objects (VBO's) and Element Array Buffer Objects (EBO's)
    // Since the floor has only four vertices.  Each vertex stores its
    //    position, its normal (0,1,0) and its (s,t)-coordinates.
    // YOU DO NOT NEED TO REMESH THE FLOOR (OR THE BACK WALL) SINCE WE USE PHONG INTERPOLATION
    float floorVerts[] = {
        // Position              // Normal                  // Texture coordinates
        -5.0f, 0.0f, -5.0f,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
         5.0f, 0.0f, -5.0f,      0.0f, 1.0f, 0.0f,          1.0f, 1.0f,         // Back right
         5.0f, 0.0f,  5.0f,      0.0f, 1.0f, 0.0f,          1.0f, 0.0f,         // Front right
        -5.0f, 0.0f,  5.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };
    unsigned int floorElts[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iFloor]);
    glBindVertexArray(myVAO[iFloor]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(floorVerts), floorVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3*sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iFloor]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(floorElts), floorElts, GL_STATIC_DRAW);

    // Creating the back wall 
    // checkl the normals later 

    //glGenVertexArrays(NumObjects, &myVAO[2]);
    //glGenBuffers(NumObjects, &myVBO[2]);
    //glGenBuffers(NumObjects, &myEBO[2]);
   

    // For the circular surface:
    // Allocate the needed VAO, VBO< EBO
    // The normal vectors is specified separately for each vertex. (It is not a generic attribute.)
    // YOU MUST MODIFY THIS TO (A) USE STRIDES OF 8 *sizeof(float), (B) COMMENT IN THE LINES FOR vertTexCoords 
    glBindVertexArray(myVAO[iCircularSurf]);
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iCircularSurf]);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iCircularSurf]);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	// Store vertices in the VBO // changed to 8 to store it 
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float))); // Store normals in the VBO // changed to 8 to store it
    glEnableVertexAttribArray(vertNormal_loc);                                 // Enabled the stored normals (so they are not generic)
    // ONCE YOU HAVE TEXTURE COORDINATES WORKING FOR THE CIRCULAR SURFACE,
    //   PUT THE NEXT TWO LINES BACK IN, AND CHANGE THE STRIDE FACTOR TO "8" IN THE PREVIOUS CALLS TO glVertexAttribPointer.
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO // uncommented
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices // uncommented 

    // No data has been loaded into the VBO's for the circular surface yet.
    // This is done by the "SamsRemeshCircularSurf" routine.
    // This is done by the "SamsRemeshCircularSurf" routine.

    SamsRemeshCircularSurf(); 

    // FOR THE BACK WALL: ADD YOUR OWN CODE!! 
    // IT WILL BE SIMILAR TO THE FLOOR ABOVE.
    // YOU DO NOT NEED TO REMESH THE BACK WALL - ONE RECTANGLE (TWO TRIANGLES) IS ENOUGH
    float wallVerts[] = {
    -5.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // top left 
    5.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,        // top right
     5.0f, 0.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Bottom right
     -5.0f, 0.0f, -5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom left
    
  
    };
    unsigned int wallElts[] = { 0, 3, 1, 2};
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall]);
    glBindVertexArray(myVAO[iWall]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(wallVerts), wallVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallElts), wallElts, GL_STATIC_DRAW);

    float wallVerts2[] = {
    -5.0f, 5.0f, 5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // top left 
    -5.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,        // top right
     -5.0f, 0.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Bottom right
     -5.0f, 0.0f, 5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom left


    };


    unsigned int wallElts2[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall2]);
    glBindVertexArray(myVAO[iWall2]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(wallVerts2), wallVerts2, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall2]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallElts2), wallElts2, GL_STATIC_DRAW);

    float wallVerts3[] = {
    3.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,        // top left
    3.0f, 5.0f, 3.0f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // top right
    3.0f, 0.0f, 3.0f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom right
     3.0f, 0.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Bottom left

    };

    unsigned int wallElts3[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall3]);
    glBindVertexArray(myVAO[iWall3]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(wallVerts3), wallVerts3, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall3]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallElts3), wallElts3, GL_STATIC_DRAW);

    // side pic
    float pictureVerts1[] = {
    -4.87f, 4.0f, 3.0f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // top left 
    -4.87f, 4.0f, -3.0f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,        // top right
     -4.87f, 1.5f, -3.0f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Bottom right
     -4.87f, 1.5f, 3.0f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom left

    };
    unsigned int picElts4[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall7]);
    glBindVertexArray(myVAO[iWall7]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(pictureVerts1), pictureVerts1, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall7]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(picElts4), picElts4, GL_STATIC_DRAW);


    // main picture 
    float pictureVerts[] = {
    -3.0f, 4.0f, -4.87f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // top left 
    3.0f, 4.0f, -4.87f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,        // top right
     3.0f, 1.5f, -4.87f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Bottom right
     -3.0f, 1.5f, -4.8f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom left

    };
    unsigned int picElts3[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall4]);
    glBindVertexArray(myVAO[iWall4]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(pictureVerts), pictureVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall4]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(picElts3), picElts3, GL_STATIC_DRAW);


    float wallVerts5[] = {
    -5.0f, 5.0f, 3.0f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // top left 
    3.0f, 5.0f, 3.0f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,        // top right
     3.0f, 0.0f, 3.0f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Bottom right
     -5.0f, 0.0f, 3.0f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom left


    };
    unsigned int wallElts5[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall5]);
    glBindVertexArray(myVAO[iWall5]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(wallVerts5), wallVerts5, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall5]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallElts5), wallElts5, GL_STATIC_DRAW);

    float frameVerts[] = {
    -3.3f - animateIncrement, 4.3f, -4.9f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // top left 
    3.3f - animateIncrement, 4.3f, -4.9f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,        // top right
     3.3f - animateIncrement, 1.2f, -4.9f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Bottom right
     -3.3f - animateIncrement, 1.2f, -4.9f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom left

    };

    unsigned int frameElts3[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall6]);
    glBindVertexArray(myVAO[iWall6]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(frameVerts), frameVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall6]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(frameElts3), frameElts3, GL_STATIC_DRAW);

    // SECOND FRAME 
    float frameVerts1[] = {
    -4.9f, 4.3f, 3.3f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // top left 
    -4.9f, 4.3f, -3.3f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,        // top right
     -4.9f, 1.2f, -3.3f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Bottom right
     -4.9f, 1.2f, 3.3f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom left

    };

    unsigned int frameElts4[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall8]);
    glBindVertexArray(myVAO[iWall8]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(frameVerts1), frameVerts1, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall8]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(frameElts4), frameElts4, GL_STATIC_DRAW);

    check_for_opengl_errors();      // Watch the console window for error messages!
}

void MyRemeshGeometries() 
{
// IT IS NOT NECESSARY TO REMESH EITHER THE FLOOR OR THE BACK WALL
// YOU DO NOT NEED TO CHANGE THIS FOR PROJECT #6.

    SamsRemeshCircularSurf();
    texSphere.Remesh(meshRes, meshRes);
    texCylinder.Remesh(meshRes, meshRes, meshRes);
    texTorus.Remesh(meshRes, meshRes );

    check_for_opengl_errors();      // Watch the console window for error messages!
    check_for_opengl_errors();      // Watch the console window for error messages!
}

// **********************************************
// MODIFY THIS ROUTINE TO RENDER THE FLOOR, THE BACK WALL,
//    AND THE SPHERES AND THE CYLINDER. -- WITH TEXTURES
// **********************************************

void MyRenderGeometries() {
    // ASK About this 
    float matEntries[16];       // Temporary storage for floats
    // ******
    // Render the Floor - using a procedural texture map
    // ******
    selectShaderProgram(shaderProgramProc);
    glBindVertexArray(myVAO[iFloor]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTextureDark.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[3]);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    if (renderFloorOnly) {
        return;
    }

    // **************
    // Render the circular surface
    selectShaderProgram(shaderProgramBitmap);
    SamsRenderCircularSurf();

    // ************ 
    // Render the back wall
    //  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
    //  BUT USE A BITMAP (shaderProgramBitmap) INSTEAD OF A PROCEDURAL TEXTURE.

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTextureDark.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // brick wall 
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the wall as a single triangle strip
    //glFrontFace(GL_CCW); 
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();


    // *************
    // Render two spheres and a cylinder
    // YOU MUST MODIFY THE CODE BELOW, AND ADD TEXTURES TO THE SPHERE AND THE CAPS OF THE CYLINDER.

    // Render a sphere with a earth image texture map
    //  YOU DO NOT NEED TO MODIFY THIS SPHERE OR ITS TEXTURE MAP\

    if (spinMode) {
        currentTime += animateIncrement;
        currentTime_rev += animateIncrement;
        if (currentTime >= maxTime) {
            currentTime = currentTime - floor(currentTime / maxTime);  // Floor function = round down to nearest integer
        }

        HourOfDay += animateIncrement;
        DayOfYear += animateIncrement / 24.0;
    }
    //cout << currentTime; 
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 1.8, 0.0);
    matDemo.Mult_glScale(.8, .8, .8);
    matDemo.Mult_glRotate(PI * DayOfYear * 20, 0.0, 1.0, 0.0);
    materialUnderTexture.LoadIntoShaders();
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[8]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();                                 // Render the sphere
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    // Render a sphere with a texture map 
    // ADD A TEXTURE MAP TO THIS SPHERE - SIMILAR TO THE CODE ABOVE


    // Render a cylinder 
    // YOU MAY LEAVE THE TEXTURE MAP ON THE SIDE OF THE CYLINDER
    // YOU MUST ADD TEXTURE MAPS TO THE TOP AND BOTTOM FACES OF THE CYLINDER
    // NOTE THERE ARE SEPARATE RENDER COMMANDS FOR THE THREE PARTS OF THE CYLINDER.
    // YOU WILL ALSO CHANGE THE ORIENTATION OF THE CYLINDER 
    // Render the second back wall 
        selectShaderProgram(shaderProgramBitmap);
        glBindVertexArray(myVAO[iWall2]);                // Select the floor VAO (Vertex Array Object)
        materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
        viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
        glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
        glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // brick wall 
        glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
        glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
        glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
        check_for_opengl_errors();

        // Render the third back wall 
        if (!renderWall) {
            glFrontFace(GL_CW);
            selectShaderProgram(shaderProgramBitmap);
            glBindVertexArray(myVAO[iWall3]);                // Select the floor VAO (Vertex Array Object)
            materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
            viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
            glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
            glBindTexture(GL_TEXTURE_2D, TextureNames[7]);     // brick wall 
            glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
            glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
            glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
            check_for_opengl_errors();
            glFrontFace(GL_CCW);
        }
    // Renders the picture frame 
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall6]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTextureDark.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);     // brick wall 
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    // Render the picture 

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall4]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, SceneNames[curScene]);     // banana 
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    // Second picture frame 
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall8]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTextureDark.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);     // brick wall 
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();


    // Second picture 
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall7]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, SolarNames[curScene]);     // banana 
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    // lightbulb
    matDemo.Mult_glTranslate(0.0, 3.9, 0.0);
    matDemo.Mult_glScale(.5, .5, .5);
    materialUnderTexture.LoadIntoShaders();
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[11]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();                                 // Render the sphere
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    //Renders a textured torus in the back left corner.
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 5.0, 0.0); 
    matDemo.Mult_glScale(0.8, 0.2, 0.8);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);            // Enable applying the texture!
    texTorus.Render();                                  // Render the torus
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 5.0, 0.0);
    matDemo.Mult_glRotate(PI/2, 0.0, 0.0, 1.0);//matDemo.Mult_glRotate(PIhalves, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.8, 0.2, 0.8);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);            // Enable applying the texture!
    texTorus.Render();                                  // Render the torus
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 5.0, 0.0);
    matDemo.Mult_glRotate(-PI / 4, 0.0, 0.0, 1.0);//matDemo.Mult_glRotate(PIhalves, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.8, 0.2, 0.8);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);            // Enable applying the texture!
    texTorus.Render();                                  // Render the torus
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 5.0, 0.0);
    matDemo.Mult_glRotate(PI / 4, 0.0, 0.0, 1.0);//matDemo.Mult_glRotate(PIhalves, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.8, 0.2, 0.8);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);            // Enable applying the texture!
    texTorus.Render();                                  // Render the torus
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 5.0, 0.0);
    matDemo.Mult_glRotate(PI / 4, 1.0, 0.0, 0.0);//matDemo.Mult_glRotate(PIhalves, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.8, 0.2, 0.8);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);            // Enable applying the texture!
    texTorus.Render();                                  // Render the torus
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 5.0, 0.0);
    matDemo.Mult_glRotate(3*PI / 2, 1.0, 0.0, 0.0);//matDemo.Mult_glRotate(PIhalves, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.8, 0.2, 0.8);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);            // Enable applying the texture!
    texTorus.Render();                                  // Render the torus
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.2, 1.1, -1.2);
    matDemo.Mult_glScale(0.2, 0.4, 0.2);
    matDemo.Mult_glTranslate(0.0, -2.1, 0.0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(1.2, 1.1, -1.2);
    matDemo.Mult_glScale(0.2, 0.4, 0.2);
    matDemo.Mult_glTranslate(0.0, -2.1, 0.0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    // Make a third Cylinder 
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.2, 1.1, 1.2);
    matDemo.Mult_glScale(0.2, 0.4, 0.2);
    matDemo.Mult_glTranslate(0.0, -2.1, 0.0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    // Make a fourth cylinder 
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(1.2, 1.1, 1.2);
    //matDemo.Mult_glRotate(PIhalves, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.2, 0.4, 0.2);
    matDemo.Mult_glTranslate(0.0, -2.1, 0.0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    materialUnderTextureDark.LoadIntoShaders();
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    double rotateValue = PI * DayOfYear * 20;
    if (columnSpin) rotateValue *= -1.0; 
    // Pillars 
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.5, 2.5, -4.5);
    matDemo.Mult_glScale(0.6, 2.5, 0.6);
    matDemo.Mult_glRotate(rotateValue, 0.0, 1.0, 0.0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    
    // SECOND PILLAR 
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.5, 2.5, 4.5);
    matDemo.Mult_glScale(0.6, 2.5, 0.6);
    matDemo.Mult_glRotate(rotateValue, 0.0, 1.0, 0.0);
    //matDemo.Mult_glRotate(PIhalves, 0.0, 0.0, 1.0);
 // matDemo.Mult_glScale(0.2, 0.4, 0.2)
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    // THIRD PILLAR 
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.5, 2.5, -4.5);
    matDemo.Mult_glScale(0.6, 2.5, 0.6);
    matDemo.Mult_glRotate(rotateValue, 0.0, 1.0, 0.0);
    // if (rotationalValue == 2PI) renderWall = !renderWall ; 
    //matDemo.Mult_glRotate(PIhalves, 0.0, 0.0, 1.0);
 // matDemo.Mult_glScale(0.2, 0.4, 0.2)
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    if (!renderWall) {
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall5]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[7]);     // brick wall 
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
}

        
    check_for_opengl_errors();      // Watch the console window for error messages!
}

void SamsRenderCircularSurf()
{
    float matEntries[16];       // Temporary storage for floats

    glBindVertexArray(myVAO[iCircularSurf]);

    // Calculate the model view matrix for the circular surface
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 1.0, 0);     // Center in the back & raise up
    matDemo.Mult_glScale(0.32, 0.3, 0.32);         // Adjust the circular diameter and height
    //matDemo.Mult_glTranslate(0.0, 3.0, 12.0);     // Center in the back & raise up
    //double rotationAngle = (DayOfYearX / 500.0) * PI2; 
    matDemo.Mult_glRotate(PI/4, 0.0, 1.0, 0.0);
    
    matDemo.Mult_glTranslate(0.0, -1.0, 0);
    // if (flipTable) {
    // 
    // }
    //matDemo.Mult_glRotate(PI, 1.0, 0.0, 0.0);
                                                 // Set the uniform values (they are not stored with the VAO and thus must be set again everytime
    materialUnderTextureDark.LoadIntoShaders();                       // Use the bright underlying material
    matDemo.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries); // Select the modelview matrix to place it
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);     // Choose Mandala texture
    // ONCE YOU HAVE TEXTURE COORDINATES FOR THE CIRCULAR SURFACE, PUT THE NEXT LINE BACK IN.
    //glFrontFace(GL_CW); 
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
                                                                   // Draw the the triangle strips
    for (int i = 0; i < meshRes; i++) {
        glDrawElements(GL_TRIANGLE_STRIP, 1 + 2 * meshRes, GL_UNSIGNED_INT,
            (void*)(i * (1 + 2 * meshRes) * sizeof(unsigned int)));
    }
    glUniform1i(applyTextureLocation, false);           // Disable applying the texture!
    //glFrontFace(GL_CCW);
}


// *******
// ADD TEXTURE COORDINATES TO EITHER YOUR OWN "MyRemeshCircularSurf" or
// TO THE PROVIDED "SamsRemeshCircularSurf"
// IF YOU USE YOUR OWN, ALSO REPLACE "SamsRenderCircularMesh" WITH YOUR
// OWN "MyRenderCircularMesh" IF NEEDED.
// TASKS FOR ADDING TEXTURE COORDINATES:
//    a. Change stride to 8*sizeof(float) instead 6*sizeof(float).
//    b. Be sure to allocate enough memory for circularVerts[].
//    c. Calculate the (s,t) texture coordinates, put them in the array.
//    d. Update the calls to glVertexAttribPointer and glEnableVertexAttribArray
//         in the routine MySetupSurfaces above.  
//       And, add new calls for the texture coordinates.

void SamsRemeshCircularSurf()
{
    // Circular surface vertices.
    int numCircularVerts = 1 + meshRes * meshRes;
    float* circularVerts = new float[8 * numCircularVerts]; // changed this to 8 bc we need it to include texture coordinates 
    // Circular surface elements (indices to vertices in a triangle strip)
    int numCircularElts = meshRes * (1 + 2 * meshRes);
    unsigned int* circularElements = new unsigned int[numCircularElts];

    float* toPtr = circularVerts;
    *(toPtr++) = 0.0f;      // Center point
    *(toPtr++) = 1.0f;
    *(toPtr++) = 0.0f;
    *(toPtr++) = 0.0f;      // Center normal
    *(toPtr++) = 1.0f;
    *(toPtr++) = 0.0f;
    // adding the texture coordinates 
    *(toPtr++) = 0.5f; // Center of Circular surface 
    *(toPtr++) = 0.5f; 
    for (int i = 0; i < meshRes; i++) {
        float theta = (float)PI2 * ((float)i) / (float)meshRes;
        float c = cosf(theta);
        float s = sinf(theta);
        float partialC = -s;
        float partialS = c;
        VectorR3 partialTheta(partialC, 0.0, partialS);
        for (int j = 1; j <= meshRes; j++) {
            float r = 2.9f * (float)PI * ((float)j) / (float)meshRes;
            float x = r;
            float dampingFactor = 0.08f;
            float fff = (float)(1.0 + dampingFactor * r * r);
            float y = j==0 ? 1.0f : fff*sin(r)/r;
            float xprime = 1.0;
            float yprime = (x * cosf(x) + sinf(x)) / (x + 1.0f) - x * sinf(x) / ((x + 1.0f) * (x + 1.0f));
            VectorR3 partialR((double)(c * xprime), yprime, (double)(s * xprime));
            *(toPtr++) = c * x;                 // (i,j) point
            *(toPtr++) = y;
            *(toPtr++) = s * x;
            VectorR3 normal = -partialR * partialTheta;
            normal.Normalize();
            *(toPtr++) = (float)normal.x;      // (i,j) normal
            *(toPtr++) = (float)normal.y;
            *(toPtr++) = (float)normal.z;
            // Adding the texture coordinates 
            float rMax = 2.9 * PI; // calculate the max radius 
            *(toPtr++) = (c*x+rMax) / (2*rMax); // (s,t) coordinates range from 0,1
            *(toPtr++) = ((-1.0 * s * x) + rMax) / (2 * rMax);
       }
    }

    unsigned int* toElt = circularElements;
    for (int i = 0; i < meshRes; i++) {
        *(toElt++) = 0;         // Central vertex
        for (int j = 0; j < meshRes; j++) {
            *(toElt++) = ((i + 1) % meshRes) * meshRes + j + 1;
            *(toElt++) = i * meshRes + j + 1;
        }
    }

    glBindVertexArray(myVAO[iCircularSurf]);
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iCircularSurf]);
    glBufferData(GL_ARRAY_BUFFER, 8 * numCircularVerts * sizeof(float), circularVerts, GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iCircularSurf]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, numCircularElts * sizeof(unsigned int), circularElements, GL_STATIC_DRAW);

    delete[] circularVerts;
    delete[] circularElements;
}

